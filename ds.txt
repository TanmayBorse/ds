// Server.java



import java.rmi.Naming;

import java.rmi.RemoteException;

import java.rmi.registry.LocateRegistry;

import java.rmi.registry.Registry;

import java.rmi.server.UnicastRemoteObject;

import java.util.ArrayList;

public class Server implements Service {

    private ArrayList<String> messages = new ArrayList<>();

    public Server() throws RemoteException {

        UnicastRemoteObject.exportObject(this, 0);

    }

    public void receiveMessage(String message) throws RemoteException {

        System.out.println("Received message: " + message);

        messages.add(message);

    }

    public static void main(String[] args) {

        try {

            Server server = new Server();

            Registry registry = LocateRegistry.createRegistry(1099);

            Naming.rebind("rmi://localhost/Service", server);

            System.out.println("Server ready");

        } catch (Exception e) {

            System.out.println("Server exception: " + e.toString());

            e.printStackTrace();

        }

    }

}

interface Service extends java.rmi.Remote {

    void receiveMessage(String message) throws RemoteException;

}
_______________________
// Client.java

import java.rmi.Naming;

import java.rmi.RemoteException;

import java.rmi.registry.LocateRegistry;

import java.rmi.registry.Registry;

import java.util.Scanner;

public class Client implements Runnable {

    private Service service;

    public Client(Service service) {

        this.service = service;

    }

    public void run() {

        Scanner scanner = new Scanner(System.in);

        while (true) {

            System.out.print("Enter message: ");

            String message = scanner.nextLine();

            try {

                service.receiveMessage(message);

            } catch (RemoteException e) {

                System.out.println("Client exception: " + e.toString());

                e.printStackTrace();

            }

        }

    }

    public static void main(String[] args) {

        try {

            Registry registry = LocateRegistry.getRegistry(1099);

            Service service = (Service) Naming.lookup("rmi://localhost/Service");

            Client client = new Client(service);

            Thread thread = new Thread(client);

            thread.start();

        } catch (Exception e) {

            System.out.println("Client exception: " + e.toString());

            e.printStackTrace();

        }

    }

}



_____________________________________________________________________________________________________________________________________________________________
DS 3

#include<mpi.h>
#include<stdio.h>
#include<stdlib.h>
#define ARRAY_SIZE 16
int main(int argc, char** argv){
	int rank, size;
	int sum = 0;
	int array[ARRAY_SIZE];
	MPI_init(&argc , &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &size);
	
	if(rank == 0){
		for(int i=0; i<ARRAY_SIZE;i++){
			array[i] = i+1;
		}
	}
	
	int subarray_size = ARRAY_SIZE / size;
	int subarray[subarray_size];
	MPI_Scatter(array, subarray_size, MPI_INT, subarray, subarray_size, MPI_INT, 0, MPI_COMM_WORLD);
	
	int local_sum = 0;
	for (int i=0;i<subarray_size;i++){
		local_sum+=subarray[i];
	}
	
	printf("Process %d local sum is %d \n", rank, local_sum);
	MPI_Reduce(&local_sum, &sum, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);
	if (rank == 0){
		printf("Sum of the elements is %d \n", sum);
	}
	MPI_Finalize();
	return 0;
}

_______________________________________________________________________________________________________________________________________________________________
// DS 5 in c

#include <stdio.h>
#include <conio.h>
#include <dos.h>
#include <time.h>
int main(){
	int cs=0,pro=0;
	double run=5;
	char key='a';
	time_t t1,t2;
	printf("press a key(except q)to enter a process into critical section.\n");
	printf("press q at any time to exit.\n");
	t1=time(NULL)-5;
	while(key!='q'){
		while(!kbhit()){
			if(cs!=0){
				t2=time(NULL);
				if(t2-t1>run){
					printf("process %d exits the critical section.\n",pro-1);
					cs=0;
				}
			}
		}
		key=getch();
		if(key!='q'){
			if(cs!=0)
				printf("error.another process is executing.please wait.\n");
			else
				printf("process %d entered the critical section.\n",pro);
			cs=1;
			pro++;
			t1=time(NULL);
		}
	}
}

__________________________________________________________________________________________________________________________________________________________________


# 5th in python

import threading
import time

class TokenRingMutex:
    def __init__(self, n):
        self.tokens = [threading.Event() for _ in range(n)]
        self.tokens[0].set()
        self.n = n
        self.queue = []
        
    def request_critical_section(self):
        self.queue.append(threading.current_thread().ident)
        while True:
            token_idx = self.queue.index(threading.current_thread().ident)
            self.tokens[token_idx % self.n].wait()
            if token_idx == 0:
                return
            
    def release_critical_section(self):
        token_idx = self.queue.index(threading.current_thread().ident)
        self.tokens[(token_idx + 1) % self.n].set()
        self.queue.remove(threading.current_thread().ident)

def worker(mutex, id):
    while True:
        print(f"Worker {id} is outside the critical section")
        mutex.request_critical_section()
        print(f"Worker {id} is inside the critical section")
        time.sleep(1)
        mutex.release_critical_section()

if __name__ == "__main__":
    mutex = TokenRingMutex(3)
    workers = []
    for i in range(3):
        worker_thread = threading.Thread(target=worker, args=(mutex, i))
        workers.append(worker_thread)
        worker_thread.start()
    
    for worker_thread in workers:
        worker_thread.join()
_______________________________________________________________________________________________________________________________________________________________

// 5 in java

import java.util.*;
import java.io.*;

public class TokenRing {
    public static void main(String args[]) throws Throwable {
        Scanner scan = new Scanner(System.in);
        System.out.println("Enter the number of nodes:");
        int n = scan.nextInt();
        int m = n - 1;

        int token = 0;
        int ch = 0;
        int flag = 0;

        for (int i = 0; i < n; i++) {
            System.out.print(" " + i);
            System.out.println("+0");
        }

        do {
            System.out.println("Enter sender:");
            int s = scan.nextInt();
            System.out.println("Enter receiver:");
            int r = scan.nextInt();
            System.out.println("Enter Data:");
            int a = scan.nextInt();

            System.out.print("Token passing:");
            for (int j = s; j != (s + 1) % n; j = (j + 1) % n) {
                System.out.print(" " + j + "->");
                System.out.println(" " + s);
                System.out.println("Sender " + s + " sending data " + a);

                for (int i = s + 1; i != (s + 1) % n; i = (i + 1) % n) {
                    System.out.println("Data " + a + " forwarded by " + i);
                }

                System.out.println("Receiver " + r + " received data: " + a + "\n");
                token = s;

                try {
                    if (flag == 1) {
                        System.out.print("Invalid Input!!...");
                    }
                    System.out.print("Do you want to send again? Enter 1 for Yes and 0 for No: ");
                    ch = scan.nextInt();

                    if (ch != 1 && ch != 0) {
                        flag = 1;
                    } else {
                        flag = 0;
                    }
                } catch (InputMismatchException e) {
                    flag = 0;
                    System.out.println("Invalid Input");
                }
            }
        } while (ch != 1 && ch != 0);
    }
}

// Code compile and run step similar to 1st Assignment
// To run code open file path in cmd
// for compilation-> javac TokenRing.java
// to run code    -> TokenRing
